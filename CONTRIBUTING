# ECUMENIC CREATIVE OPERATIONS 
## https://ecumenic.github.io
## ecumenic@protonmail.com

# ◇

## ECUMENIC CREATIVE OPERATIONS CONTRIBUTING GUIDE:
## https://github.com/ecumenic/project/blob/master/CONTRIBUTING

# ◇

## 1. PARTICIPATION REQUIREMENTS:

1.1. PARTICIPATION RESTRICTION 
[PG] - Parental Guidance Recommended.
https://en.wikipedia.org/wiki/Motion_picture_content_rating_system

1.2. ECUMENIC CREATIVE OPERATIONS PROJECT COMPLIANCY:
You must examine and decide to tune and align to our project's mission, procedures, and methodologies as explained in our website, project document, and documentation. Skim the project's repositories, issues (open and closed), policies, social medias, and development communities also to have a broader view of it.
https://ecumenic.github.io
https://github.com/ecumenic/project
https://github.com/ecumenic/documentation

1.2.1. PHILOSOPHIC ALIGNMENT:
- Spiritual & Cultural Creation Thanking.
- Mentored Community Skills Improvement.
- Every Work As An Artform Empowerment.
- Respectful Professional Relations Meeting. 
- Sensibility & Rationality Awareness Optimization. 
- Responsible Ethic Creativity Producing.
- On-Demand Simple Task-Oriented Schedule.
- Reputation & Portfolio Valuing & Implementation.
- Sustainable Creative Industry Networking.
- Interfaith Religious Freedom Fostering.
- Reliability Engineered Transparent Self-Governance.
- Optimum Sustainable Logistics Management. 
- Technical Production Labour Qualification. 
- Fair-Trade Contracting Lawful Formalization. 
- Regenerative Collective Artscraft Productions.
- Analytic Creative Economy Chain Valuing. 
- Progressive Multimedia Process Documentation.
- Complex Knowledge Simplification Sharing.
- Scalable Positioning Possibilities.

1.3. CODE OF CONDUCT COMPLIANCY:
You must commit to our 'CODE OF CONDUCT' to be able to join this project.
https://github.com/ecumenic/project/blob/master/CODE_OF_CONDUCT

1.4. FAIR-TRADE LEGAL CONTRACTS COMPLIANCY:
If you are to offer any paid service or product to us please refer to our 'CONTRACT' to understand how we work with pre-agreed paid services.
https://github.com/ecumenic/project/blob/master/CONTRACT

1.5. COLLABORATION DECISION:
Understanding our institutional design and policies you may decide on what type of collaboration you want to offer us. We will decide on which collabrations are needed as transparently as possible and will deliver you a response as soon as possible.
https://opensource.guide/how-to-contribute/#what-it-means-to-contribute
- Overall Project Review.
- Methodologies & Processes Optimization.
- Solve & Organize Issues & Suggestions.
- Documentation Optimization.
- New Partnership Pitching.
- Meetups & Workshops Organization.
- Conference Production.
- Automate Processual Setups.
- Code Cleaning And Optimization.
- Coherent Design Optimization.
- Layout Improvement.
- Reorganization Partners Research.
- Merchandise Production & Distribution.
- Templates Optimization.
- Social Media Material Curatorship.
- Develop Our Computational Applications.
- New Tutorials Or Documentations.
- Translations To Other Languages.
- Review Others Codes & Mentoring.

## 2. CONTRIBUTING PROCEDURE:

2.1. JOIN GITHUB:
- If you are not yet a part of GitHub read this how-to join and contribute in our open-source development community.
http://bit.ly/CollaborateOnGitHub

2.2. LEARN HOW TO COLLABORATE ON GITHUB:
- Research the GitHub documentation below to understand how to collaborate on a specific project. 
https://opensource.guide/how-to-contribute/#what-it-means-to-contribute

2.3. REVIEW OUR README:
https://github.com/ecumenic/project/blob/master/README

2.5. COMMIT TO OUR LICENSE AGREEMENT:
https://github.com/ecumenic/project/blob/master/LICENSE

2.6. COMMIT TO OUR CODE OF CONDUCT:
https://github.com/ecumenic/project/blob/master/CODE_OF_CONDUCT

2.7. COMMIT TO OUR CONTRACT:
https://github.com/ecumenic/project/blob/master/CONTRACT

2.8. PURPOSE ALIGNMENT:
- Please beware that if you join us you will be asked to sign a legal contract declaring yourself in alignment to our purposes and to our consensual internal policies and to follow our work methodology.

2.9. PRECISEVELY CONTACT US:
Only contact us through our email ecumenic@protonmail.com with:
- Your GitHub username or how you will contribute reliably outside of it;
- A paragraph about your work;
- Your yet undeveloped desired contribution concise proposal; &
- Feasable proofs you are able to develop and deploy your proposal, such as (but not limited to): your portfolio, execution project, and curriculum vitae. 

## 3. AFTER YOU'VE BEEN ACCEPTED TO JOIN USE:

3.1. PROJECT WELCOME REVIEW:
- We will contact you with our welcome letter with instructions and a gift for your participation.
- We will give you a project overview presentation with your role authorizations and project duties and aid you in presenting yourself to our community.
- Please tell us if you'd like to have personal mentoring.
- Research our ongoing projects, repositories, your contributive issues and pulls.
- Execute your proposed contribution following our agreement.
- If you can’t find a feature and have not a solution use the git issue and pull features.
- For other cases, please contact us.

3.2. FORMATTING:
Whether you’re a one-time contributor or trying to join OUR community, working with others is one of the most important skills you’ll develop in open-source cultural enterprises.
- Present yourself as poethically and concisevely possibly. Try a haiku with an explanatory paragraph and a weblink for portfolio.
https://en.wikipedia.org/wiki/Auditory_scene_analysis
https://en.wikipedia.org/wiki/Haiku
- Before you open an issue or pull request, or ask a question in chat, keep these points in mind to help your ideas come across effectively.
https://github.com/features/code-review
- Understand code review and our own files formatting style and imitate it as much as possible, or propose changes to it (such as developing an automated code formatter).
https://github.com/dotnet/codeformatter
- Give concise synthetic context. Help others get scalably quickly up to our enterprise speed. 
- If you’re suggesting a new idea, explain why you think it’d be useful to the project (not just to you!).
https://en.wikipedia.org/wiki/Synthesis
- Do your homework beforehand. It’s ok not to know things, but show that you tried.
https://en.wikipedia.org/wiki/Process_design
- If you’re running into an error, explain what you’re trying to do and how to reproduce it.
https://en.wikipedia.org/wiki/Narrative
- Before asking for help, be sure to check a project’s README, documentation, issues (open or closed), mailing list, and search the internet for an answer. People will appreciate when you demonstrate that you’re trying to learn.
https://en.wikipedia.org/wiki/FAQ
- Keep requests short and direct. Much like sending an email, every contribution, no matter how simple or helpful, requires someone else’s review. Many projects have more incoming requests than people available to help. Be concise. You will increase the chance that someone will be able to help you.
https://en.wikipedia.org/wiki/Autonomy
- Keep all communication public. Although it’s tempting, don’t reach out to maintainers privately unless you need to share sensitive information (such as a security issue or serious conduct violation). When you keep the conversation public, more people can learn and benefit from your exchange. Discussions can be, in themselves, contributions.
https://en.wikipedia.org/wiki/Open_source
- It’s okay to ask questions (but be patient!). Everybody was new to the project at some point, and even experienced contributors need to get up to speed when they look at a new project. By the same token, even longtime maintainers are not always familiar with every part of the project. Show them the same patience that you’d want them to show to you.
https://en.wikipedia.org/wiki/Patience
- Respect community decisions. Your ideas may differ from the community’s priorities or vision. They may offer feedback or decide not to pursue your idea. While you should discuss and look for compromise, maintainers have to live with your decision longer than you will. If you disagree with their direction, you can always work on your own fork or start your own project.
https://en.wikipedia.org/wiki/Meditation
https://en.wikipedia.org/wiki/Worship
https://en.wikipedia.org/wiki/Prayer
- Above all, keep it politely respectful. Open source is made up of collaborators from all over the world. Context gets lost across languages, cultures, geographies, and time zones. In addition, written communication makes it harder to convey a tone or mood. Assume good intentions in these conversations. It’s fine to politely push back on an idea, ask for more context, or further clarify your position. Just try to leave the internet a better place than when you found it.
https://en.wikipedia.org/wiki/Respect
https://en.wikipedia.org/wiki/Dignity

3.3. GIT COLLABORATING:
We use Git methodology in our decision-making and conflict resolution.
We 'issue' problems analysis or 'pull' solutions proposals in the project.
This way we are able to have a historic of our projects changes and get features back when necessary.
https://en.wikipedia.org/wiki/Git
https://en.wikipedia.org/wiki/Issue_tracking_system
https://en.wikipedia.org/wiki/Distributed_version_control#Pull_requests
- Before you open an 'issue' or 'pull' request, check the project’s contributing README.MD, to make sure it is not yet being developed, and also you may need to set it to specific methods.
- If you want to make a substantial contribution, open an issue to ask before working on it. 
- It’s helpful to watch the project for a while (on GitHub, you can click “Watch” to be notified of all conversations), and get to know community members, before doing work that might not get accepted.

3.3.1. ISSUE OPENING:
You should usually open an issue in the following situations:
- Report an error you can’t solve yourself
- Discuss a high-level topic or idea (for example, community, vision or policies)
- Propose a new feature or other project idea
- Tips for communicating on issues:
- If you see an open issue that you want to tackle, comment on the issue to let people know you’re on it. That way, people are less likely to duplicate your work.
- If an issue was opened a while ago, it’s possible that it’s being addressed somewhere else, or has already been resolved, so comment to ask for confirmation before starting work.
- If you opened an issue, but figured out the answer later on your own, comment on the issue to let people know, then close the issue. Even documenting that outcome is a contribution to the project.

3.3.2. PULL REQUESTING:
- You should usually open a pull request in the following situations:
- Submit trivial fixes (for example, a typo, a broken link or an obvious error)
- Start work on a contribution that was already asked for, or that you’ve already discussed, in an issue
- A pull request doesn’t have to represent finished work. It’s usually better to open a pull request early on, so others can watch or give feedback on your progress. Just mark it as a “WIP” (Work in Progress) in the subject line. You can always add more commits later.
- Fork the repository and clone it locally. 
- Connect your local to the original “upstream” repository by adding it as a remote.
- Pull in changes from “upstream” often so that you stay up to date so that when you submit your pull request, merge conflicts will be less likely.
- Create a branch for your edits.
- Reference any relevant issues or supporting documentation.
- Include screenshots of the before and after if your changes include differences in coding. Drag and drop the images into the body of your pull request.
- Test your changes! Run your changes against any existing tests if they exist and create new ones when needed. Whether tests exist or not, make sure your changes don’t break the existing project.
- Contribute in the style of the project to the best of your abilities. This may mean using indents, semi-colons or comments differently than you would in your own repository, but makes it easier for the maintainer to merge, others to understand and maintain in the future.

3.4. CONFLICT RESOLUTION:
We use our 'CODE OF CONDUCT' and 'CONTRACT' to stablish conflict resolution.
If you have any problem not stipulated in it contact us as soon as possible.
https://en.wikipedia.org/wiki/Conflict_resolution
https://github.com/ecumenic/project/blob/master/CODE_OF_CONDUCT
https://github.com/ecumenic/project/blob/master/CONTRACT

3.5. CONTRIBUTIONS ANALYSIS PROCESS:
We follow our 'Enterprise Principles' as stated in our 'README' file to judge contributions.
- Priorities Management.
- Contributions Analysis Governance Board Meeting.
- Project Monitoring Overview.
- Processes Optimization Plan.
- Possible Automations & Authorizations.
- Risk Management Analysis.
- Cost & Benefits Management Analysis.
- Administrative Board Decision.
- Enterprise Position Contribution Notification.

3.4. WHAT HAPPENS AFTER YOUR CONTRIBUTION:
- Your contribution may not get accepted: Hopefully you didn’t put too much work into it already. If you’re not sure why it wasn’t accepted, it’s perfectly reasonable to ask the maintainer for feedback and clarification. Ultimately, however, you’ll need to respect that this is their decision. Don’t argue or get hostile, but if you need please contact the project maintainer. You’re always welcome to make other propositions. and if you really believe your solution must be developed, announce us your fork project may God guide you in it.
- Your contribution gets accepted.

## 4. LICENCE: 
Please refer to our project 'LICENSE' link below.
https://github.com/ecumenic/project/blob/master/LICENSE

## 5. CONTACT:
ecumenic@protonmail.com

# ◇
